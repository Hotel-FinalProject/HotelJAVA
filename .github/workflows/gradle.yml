name: CI/CD Docker3

on:
  push:
    branches: [ dev ]

env:
  VERSION: 'v1.0'
  NAME: erppro

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # SpringBoot 빌드
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew
      - name: Build with Gradle
        run: |
          cd backend
          ./gradlew clean bootJar

      # Vue 빌드
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Vue dependencies and build
        run: |
          cd frontend
          npm install
          npm run build

      # Spring Boot 백엔드 도커 이미지 생성
      - name: Docker image build (backend)
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/erppro-backend:${{ env.VERSION }} ./backend

      # Vue 프론트엔드 도커 이미지 생성
      - name: Docker image build(front)
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/erppro-frontend:${{ env.VERSION }} ./frontend

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Hub push backend
        run: docker push ${{ secrets.DOCKER_USERNAME }}/erppro-backend:${{ env.VERSION }}

      - name: Docker Hub push frontend
        run: docker push ${{ secrets.DOCKER_USERNAME }}/erppro-frontend:${{ env.VERSION }}

  deploy:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Configure AWS credentials
        run: |
          echo "[default]" > ~/.aws/config
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/config
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/config
      - name: Deploy to AWS EC2
        env:
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > finalproject.pem
          chmod 600 finalproject.pem
          ssh -i finalproject.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP << 'EOF'
            cd /home/ubuntu

            # 최신 이미지 가져오기
            docker-compose pull

            # Docker Compose 실행
            docker-compose down || true
            docker-compose up -d

            # 불필요한 이미지 정리
            docker image prune -af
          EOF
