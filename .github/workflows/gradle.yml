name: CI/CD Docker3

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]

# 환경설정
env:
  VERSION: 'v1.0'
  NAME: erppro

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: |
          cd backend
          ./gradlew clean bootJar

      # 3. Docker 이미지 빌드
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/erppro:${{ env.VERSION }} ./backend

      # 4. DockerHub 로그인
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/erppro:${{ env.VERSION }}

  deploy:
    needs: build-docker-image
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      # 1. AWS CLI 설치
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # 2. AWS 자격 증명 설정
      - name: Configure AWS credentials
        run: |
          echo "[default]" > ~/.aws/config
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/config
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/config

      # 3. EC2 인스턴스에 SSH로 접속하여 Docker Compose 실행
      - name: Deploy to AWS EC2
        env:
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP << 'EOF'
            # 이전 컨테이너 정지
            cd /home/ubuntu
            docker-compose down || true
          
            # 새로운 컨테이너 시작
            docker-compose up -d
          
            # 불필요한 이미지 정리
            docker image prune -af
          EOF
